[project]
requires-python = ">=3.9"

[tool.poetry]
name = "starry-bpy-type-stubs"
version = "1.0.0"
description = ""
authors = ["Isamu Mogi <isamu@leafytree.jp>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.10.*"
bpy = "3.6.*"

[tool.poetry.dev-dependencies]
codespell = "*"
mypy = "*"
pyright = "*"
ruff = "*"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A002", # Argument `x` is shadowing a Python builtin
    "A003", # Class attribute `x` is shadowing a Python builtin
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ERA001", # Found commented-out code
    "F401", # `x` imported but unused
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FIX002", # Line contains TODO, consider resolving the issue
    "N801", # Class name `x` should use CapWords convention
    "N802", # Function name `x` should be lowercase
    "PLR0913", # Too many arguments in function definition (x > y)
    "PYI011", # Only simple default values allowed for typed arguments
    "PYI026", # Use `typing_extensions.TypeAlias` for type alias, e.g., `x: TypeAlias = y`
    "UP007", # Use `X | Y` for type annotations
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link on the line following this TODO

    # Ruff 0.1.6 may cause conflicts when used with the formatter: `COM812`, `ISC001`.
    "COM812", # Trailing comma missing
    "ISC001", # Implicitly concatenated string literals on one line
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
python_version = "3.9"
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = true

[[tool.mypy.overrides]]
module = [
    "io_scene_vrm.*",
]
ignore_missing_imports = true

[tool.pylint.main]
ignore-paths = "." # Please use Ruff instead.

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingModuleSource = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
