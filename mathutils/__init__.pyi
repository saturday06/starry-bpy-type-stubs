from collections.abc import Iterable, Iterator
from typing import Union, overload

class Matrix:
    def copy(self) -> "Matrix": ...
    @classmethod
    def Translation(cls, vector: "Vector") -> "Matrix": ...
    @classmethod
    def Rotation(
        cls, angle: float, size: int, axis: Union[str, "Vector"]
    ) -> "Matrix": ...

    # ドキュメントには"fallback"という引数がついているが、それを指定すると
    # フォールバック時にそれが返るらしい。でもそれだと型が合わないので
    # 使わないでほしいという気持ちを込めるため書かない。
    def inverted(self) -> "Matrix": ...
    @overload
    def __matmul__(self, other: "Matrix") -> "Matrix": ...
    @overload
    def __matmul__(self, other: "Vector") -> "Vector": ...
    def to_translation(self) -> "Vector": ...

class Vector(Iterable[float]):
    def __init__(self, seq: Iterable[Union[int, float]]) -> None: ...
    def copy(self) -> "Vector": ...
    def __truediv__(self, other: float) -> "Vector": ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __add__(self, other: "Vector") -> "Vector": ...
    def __sub__(self, other: "Vector") -> "Vector": ...
    def __mul__(self, other: float) -> "Vector": ...
    def __matmul__(self, other: Matrix) -> "Vector": ...
    @overload
    def __getitem__(self, index: int) -> float: ...
    @overload
    def __getitem__(self, index: slice) -> tuple[float, ...]: ...
    def __iter__(self) -> Iterator[float]: ...

class Quaternion:
    def __init__(
        self, seq: Union[Vector, Iterable[Union[int, float]]], angle: float
    ) -> None: ...
    def copy(self) -> "Quaternion": ...
    def rotate(self, other: Union["Euler", "Quaternion", Matrix]) -> None: ...

class Color:
    r: float
    g: float
    b: float

class Euler:
    def __init__(self, angles: Iterable[float], order: str = "XYZ") -> None: ...
